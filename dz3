using System.Net;
using System.Net.Http.Json;
using System.Text;
using Microsoft.Extensions.FileProviders;

namespace dz3 {

    public class Person
    {
        public string? birth_year { get; set; }
        public string? eye_color { get; set; }
        public List<string>? films { get; set; }
        public string? gender { get; set; }
        public string? hair_color { get; set; }
        public string? height { get; set; }
        public string? homeworld { get; set; }
        public string? mass { get; set; }
        public string? name { get; set; }
        public string? skin_color { get; set; }
        public DateTime created { get; set; }
        public DateTime edited { get; set; }
        public List<string>? species { get; set; }
        public List<string>? starships { get; set; }
        public string? url { get; set; }
        public List<string>? vehicles { get; set; }
    }

    public class Film
    {
        public List<string>? characters { get; set; }
        public DateTime? created { get; set; }
        public string? director { get; set; }
        public DateTime? edited { get; set; }
        public int? episode_id { get; set; }
        public string? opening_crawl { get; set; }
        public List<string>? planets { get; set; }
        public string? producer { get; set; }
        public string? release_date { get; set; }
        public List<string>? species { get; set; }
        public List<string>? starships { get; set; }
        public string? title { get; set; }
        public string? url { get; set; }
        public List<string>? vehicles { get; set; }
    }

    public class Starship
    {
        public string? MGLT { get; set; }
        public string? cargo_capacity { get; set; }
        public string? consumables { get; set; }
        public string? cost_in_credits { get; set; }
        public DateTime? created { get; set; }
        public string? crew { get; set; }
        public DateTime? edited { get; set; }
        public string? hyperdrive_rating { get; set; }
        public string? length { get; set; }
        public string? manufacturer { get; set; }
        public string? max_atmosphering_speed { get; set; }
        public string? model { get; set; }
        public string? name { get; set; }
        public string? passengers { get; set; }
        public List<string>? films { get; set; }
        public List<string>? pilots { get; set; }
        public string? starship_class { get; set; }
        public string? url { get; set; }
    }

    public class Vehicle
    {
        public string? cargo_capacity { get; set; }
        public string? consumables { get; set; }
        public string? cost_in_credits { get; set; }
        public DateTime? created { get; set; }
        public string? crew { get; set; }
        public DateTime? edited { get; set; }
        public string? length { get; set; }
        public string? manufacturer { get; set; }
        public string? max_atmosphering_speed { get; set; }
        public string? model { get; set; }
        public string? name { get; set; }
        public string? passengers { get; set; }
        public List<string>? pilots { get; set; }
        public List<string>? films { get; set; }
        public string? url { get; set; }
        public string? vehicle_class { get; set; }
    }
    public class Species
    {
        public string? average_height { get; set; }
        public string? average_lifespan { get; set; }
        public string? classification { get; set; }
        public DateTime? created { get; set; }
        public string? designation { get; set; }
        public DateTime? edited { get; set; }
        public string? eye_colors { get; set; }
        public string? hair_colors { get; set; }
        public string? homeworld { get; set; }
        public string? language { get; set; }
        public string? name { get; set; }
        public List<string>? people { get; set; }
        public List<string>? films { get; set; }
        public string? skin_colors { get; set; }
        public string? url { get; set; }
    }

    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class Planet
    {
        public string? climate { get; set; }
        public DateTime? created { get; set; }
        public string? diameter { get; set; }
        public DateTime? edited { get; set; }
        public List<string>? films { get; set; }
        public string? gravity { get; set; }
        public string? name { get; set; }
        public string? orbital_period { get; set; }
        public string? population { get; set; }
        public List<string>? residents { get; set; }
        public string? rotation_period { get; set; }
        public string? surface_water { get; set; }
        public string? terrain { get; set; }
        public string? url { get; set; }
    }



    static class StarWarsApi
    {
        static string BaseUrl = "https://swapi.py4e.com/api/";
        static HttpClient client = new HttpClient();

        private static async Task<T> GetDataAsync<T>(string endpoint = "", string? fullUrl = null)
        {
            string url;
            if (endpoint == "") { 
                url = fullUrl ?? BaseUrl;
            } else { 
                url = BaseUrl + endpoint;
            }
            
            HttpResponseMessage response = await client.GetAsync(url);
            if(response.IsSuccessStatusCode)
            {
                string json = await response.Content.ReadAsStringAsync();
                T? model = await client.GetFromJsonAsync<T?>(url);
                if (model != null)
                {
                    return model;
                }
                else
                {
                    throw new Exception($"Failed deserialization {endpoint}");
                }
            }
            else
            {
                throw new Exception($"Error fetching data from {endpoint}: {response.StatusCode}");
            }
        }

        public static async Task<Person> GetPerson(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Person>($"people/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Person>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

        public static async Task<Film> GetFilm(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Film>($"films/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Film>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

        public static async Task<Starship> GetStarship(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Starship>($"starships/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Starship>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

        public static async Task<Vehicle> GetVehicle(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Vehicle>($"vehicles/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Vehicle>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

        public static async Task<Species> GetSpecies(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Species>($"species/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Species>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

        public static async Task<Planet> GetPlanet(int? id = null, string? url = null)
        {
            if (id != null)
            {
                return await GetDataAsync<Planet>($"planets/{id}/");
            }
            else if (url != null)
            {
                return await GetDataAsync<Planet>(fullUrl: url);
            }
            else
            {
                throw new ArgumentException("Either id or url must be provided.");
            }
        }

    }

    class Program
    {
        static async Task Main()
        {
            try { 
                var lukeSkywalker = StarWarsApi.GetPerson(id: 1).Result;
                Console.WriteLine($"Name: {lukeSkywalker.name}");
                Console.WriteLine($"Birth Year: {lukeSkywalker.birth_year}");
                Console.WriteLine($"Height: {lukeSkywalker.height}");
                Console.WriteLine($"Mass: {lukeSkywalker.mass}");

                foreach (var filmUrl in lukeSkywalker.films ?? new List<string>())
                {
                    var film = await StarWarsApi.GetFilm(url: filmUrl);
                    Console.WriteLine($"Film: {film.title} ({film.release_date})");
                }

                foreach (var starshipUrl in lukeSkywalker.starships ?? new List<string>())
                {
                    var starship = await StarWarsApi.GetStarship(url: starshipUrl);
                    Console.WriteLine($"Starship: {starship.name} ({starship.starship_class})");
                }

                foreach (var vehicleUrl in lukeSkywalker.vehicles ?? new List<string>())
                {
                    var vehicle = await StarWarsApi.GetVehicle(url: vehicleUrl);
                    Console.WriteLine($"Vehicle: {vehicle.name} ({vehicle.vehicle_class})");
                }

                foreach (var speciesUrl in lukeSkywalker.species ?? new List<string>())
                {
                    var species = await StarWarsApi.GetSpecies(url: speciesUrl);
                    Console.WriteLine($"Species: {species.name} ({species.classification})");
                }

                foreach (var planetUrl in lukeSkywalker.homeworld != null ? new List<string> { lukeSkywalker.homeworld } : new List<string>())
                {
                    var planet = await StarWarsApi.GetPlanet(url: planetUrl);
                    Console.WriteLine($"Homeworld: {planet.name} ({planet.climate}, {planet.terrain})");
                }
                
            } catch (Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
            }
        }
    }
}
